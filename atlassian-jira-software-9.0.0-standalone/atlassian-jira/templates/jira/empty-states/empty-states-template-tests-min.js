AJS.test.require(["jira.webresources:empty-states","jira.webresources:wrm-context-path"],function(){"use strict";require(["jira/empty-states/template","wrm/context-path"],function(e,t){function s(e,t){var s=e.querySelector(r);ok(s,"Could not find `.empty-state__spot` element"),equal(s.getAttribute("src"),t,"Expected different image src attribute")}var r=".empty-state__container .empty-state__spot",n=".empty-state__container .empty-state__hint";module("Jira EmptyStates",{setup:function(){this.fixture=document.getElementById("qunit-fixture")},teardown:function(){this.fixture.innerHTML=""}}),test("Should use a default image when $imageURL not provided",function(){this.fixture.innerHTML=e.render({message:""}),s(this.fixture,t()+"/images/empty-states/no-results.svg")}),test("Should use provided $imageURL",function(){this.fixture.innerHTML=e.render({message:"",imageURL:"/some/path/to/image.svg"}),s(this.fixture,"/some/path/to/image.svg")}),["some-css-class","class1 class2","class3 class2 class1",void 0,""].forEach(function(t){test("Should render the empty state container with correct css classes for $extraClasses="+t,function(){this.fixture.innerHTML=e.render({message:"",extraClasses:t});var s=this.fixture.querySelector(".empty-state__container"),r=Array.from(s.classList.values()).sort(),n=t&&t.trim()?t.trim().split(" "):[];n.push("empty-state__container"),n.sort(),deepEqual(r,n,"Expected different css classes")})}),["No issues were found to match your search","<strong>markup should be escaped here</strong>",""].forEach(function(t){test("Should render the empty state message for $message="+t,function(){this.fixture.innerHTML=e.render({message:t});var s=this.fixture.querySelector(".empty-state__container .empty-state__message");ok(s,"Could not find `.empty-state__message` element"),equal(s.textContent,t,"Expected different empty state message"),equal(this.fixture.querySelector(n),null,"Hint element should not be rendered")})});var i=["Try logging in to see more results",'Try <a href="#">logging in</a> to see more results'];i.forEach(function(t){test("Should render the empty state hint for $hint="+t+" with not provided 'noAutoescapeHint'",function(){this.fixture.innerHTML=e.render({message:"",hint:t});var s=this.fixture.querySelector(n);ok(s,"Could not find `.empty-state__hint` element"),equal(s.textContent,t,"Expected different empty state hint")})}),i.forEach(function(t){test("Should render the empty state hint for $hint="+t+" with $noAutoescapeHint=true",function(){this.fixture.innerHTML=e.render({message:"",hint:t,noAutoescapeHint:!0});var s=this.fixture.querySelector(n);ok(s,"Could not find `.empty-state__hint` element"),equal(s.innerHTML,t,"Expected different empty state hint")})})})});