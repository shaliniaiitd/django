AJS.test.require(["jira.webresources:viewcustomfields"],function(){"use strict";var e=require("jira/customfields/customfieldsCollection"),t=require("jira/moment");module("CustomfieldsCollection",{setup:function(){this.sandbox=sinon.sandbox.create(),this.collection=new e},teardown:function(){this.sandbox.restore()}}),test("passes proper values to backend",function(){this.collection.filters.projectIds=[],ok(void 0===this.collection.getFilterValues("projectIds"),"Empty array is set to undefined"),this.collection.filters.projectIds=[1],deepEqual(this.collection.getFilterValues("projectIds"),[1],"Populated array is passed"),this.collection.filters.sortColumn=null,ok(void 0===this.collection.getFilterValues("sortColumn"),"Null is set to undefined"),this.collection.filters.sortColumn="values",equal(this.collection.getFilterValues("sortColumn"),"values","String is passed"),this.collection.filters.lastValueUpdate=15802959e5,equal(this.collection.getFilterValues("lastValueUpdate"),15802959e5,"Number is passed"),this.collection.filters.lastValueUpdate=-1,equal(this.collection.getFilterValues("lastValueUpdate"),-1,"Negative number is passed")}),test("formats last value update date",function(){var e=[{lastValueUpdate:15802959e5},{}],s=this.collection.parseRecords({values:e});equal(s[0].formattedLastValueUpdate,t(15802959e5).format("LL"),"Date is properly formatted"),equal(s[1].formattedLastValueUpdate,void 0,"Date is not modified when it is undefined")}),test("formats issues with value",function(){var e=new Intl.NumberFormat,t=e.format,s=this.collection.parseRecords({values:[{issuesWithValue:0},{issuesWithValue:void 0},{issuesWithValue:1e5}]});equal(s[0].formattedIssuesWithValue,0,"0 is ignored"),equal(s[1].formattedIssuesWithValue,void 0,"undefined is ignored"),equal(s[2].formattedIssuesWithValue,t(1e5),"Large numbers are formatted properly")}),test("resets bulk delete state",function(){this.collection.add([{isSelected:!0},{isSelected:!1},{}]),this.collection.resetDeleteData(),deepEqual(this.collection.pluck("isSelected"),[!1,!1,!1],"bulk state is reset correctly")}),test("returns selectable models",function(){this.collection.add([{id:1,isLocked:!0},{id:2,isManaged:!0},{id:3,isManaged:!0,isLocked:!1},{id:4,isManaged:!1,isLocked:!0},{id:5,isManaged:!1},{id:6}]),deepEqual(this.collection.getSelectableModels().map(function(e){return{id:e.get("id")}}),[{id:5},{id:6}],"does not mark managed and locked as selectable")})});